# First off, it's a good idea to have all your library() calls in one place at the start.
# This makes any errors from not having a package installed appear quickly, when you run the script.
library(BiocManager)
library(affy)
library(here)
library(tidyverse) # ggplot2 stringer dplyr tidyr readr purrr  tibble forcats
library(ggsci)
library(limma)
library(ggfortify)
library(ggplot2)
library(ggsci)
library(pheatmap)
library(ggplotify) # make the pheatmap adpat to ggplot2 
library(dplyr)
library(AnnoProbe)
library(hgu133plus2.db)
library(clusterProfiler)
library(enrichplot) 
library(DOSE)
library(randomForest)
library(ROCR)
library(STRINGdb) 
library(igraph)
library(magrittr)
###  set work dictionary, read files, do RMA and take the expression
library(here)
dir_cels='C:\\Users\\wudi\\Desktop\\Di Wu project\\msap+sap vs map\\Human AP Affymetrix Arrays\\cel_files'
eset = ReadAffy(celfile.path=dir_cels)
raw.names <- sampleNames(eset) # change sample name
eset_rma = rma(eset) # RMA
# Make sure you're aware of what microarray type your data come from, and what level rma() is summarising at. For example, some Affymetrix arrays have an option to summarise at an 'exon' or a 'probeset' level with this step.
exprset1 = exprs(eset_rma) # take the expression data from CEL files

### look over the expr
summary( as.numeric( unlist(exprset1) ) ) # whether is after log2 (used to be is log2)
table( is.na(exprset1) ) # chech if there is NA
table( exprset1 < 0 ) # check if there is data less than 0
hist(unlist( exprset1 ))

### 1.1 get the sampleinfo----
pData(eset)
sampleinfo = pData(eset) # Where did this pData come from? This is the first time it appears, should this line come after another step? I wanna to use the pData to check the information of group and get the clear group information
term_x = sampleinfo$sample 
table(term_x)
sort(c( "MSAPandSAP","MAP") )
level_x = c( "MSAPandSAP","MAP")
contrast = c( "MSAPandSAP-MAP" )
b <- read.csv(file = 'APnumber.csv')#read the grouplist
term_x <- b$RAC
sampleinfo = sampleinfo %>% 
  mutate( Group = b$RAC )
identical( rownames(sampleinfo), colnames(exprset1))

### 1.2 look over the total data
boxplot( exprset1 )
library(ggsci)
n_select = 5000  
sample( 1:nrow(exprset1), n_select )
expr_l = exprset1[ sample(1:nrow(exprset1),n_select) , ] %>% 
  as.data.frame(  ) %>% 
  gather(  )  %>%  
  setNames( c( 'Sample','Expression') ) %>% 
  mutate( Group = sampleinfo$Group[ match( Sample, sampleinfo$Group) ] ) %>%  
  arrange( Group ) %>% 
  mutate( Sample = factor(Sample, levels = unique(Sample), ordered = T ) ) 
unique(expr_l$Sample)
p1 = ggplot(expr_l,aes(x= Sample, y= Expression, fill= Group, color = Group))+ 
  geom_boxplot(outlier.shape = 0.05,outlier.size = 0.05) +
  theme_light() +
  ggtitle("Expression levels of samples") +
  theme(
    plot.title = element_text( hjust = 0.5 ),
    axis.text.x = element_blank(),
    plot.background = element_rect(fill = "transparent",colour = NA)
  ) +
  scale_color_nejm(alpha = 1)+
  scale_fill_nejm(alpha = 0.8)

# normalize based on the boxplot if necessary, based on the  rma's quantile normalisation
#exprset1 = normalizeBetweenArrays( exprset1, method = "quantile" ) # normalizeBetweenArrays 可用于芯片数据标准化

### 1.3 PCA
pca1 = prcomp( as.data.frame( t( exprset1) ) ) 
xxx = pca1[["x"]]
p3 = autoplot( pca1,
               data = sampleinfo, colour = "Group",
               size=2.5, frame = FALSE, frame.type = 'norm')+
  theme_light() +
  ggtitle("PCA of samples") +
  theme(
    plot.title = element_text( hjust = 0.5 ),
    plot.background = element_rect(fill = "transparent",colour = NA)
  ) +
  scale_color_nejm(alpha = 0.8) +
  scale_fill_nejm(alpha = 0.8) 
p3
ggsave(p3, filename =paste("PCA for XXX",".pdf",sep=""),width = 5.2, height = 4)
rm( pca1 )

### 1.4.1 probe annotation----
ids=toTable(hgu133plus2SYMBOL)#take the probe ID and corespending Gene from hgu133plus2.db
gpl_anno = ids %>% 
  as.data.frame() %>%
  distinct( probe_id, .keep_all = T ) # delete the dulpucated probe 
rownames(gpl_anno) = gpl_anno$probe_id 
head( gpl_anno )
# clean the meaningless probe
exprset2 = exprset1[rownames(exprset1) %in% gpl_anno$probe_id,] # delete the unmatched probe expre
dim(exprset2)
gpl_anno = gpl_anno[gpl_anno$probe_id %in% rownames(exprset2),] # delete the unmatched probe

### 1.4.2 expression annotation----
identical( gpl_anno$probe_id, rownames(exprset2))# Check the rownames matched or not
gpl_anno = gpl_anno[rownames(exprset2),] #rearrangement

identical( gpl_anno$probe_id, rownames(exprset2))# Check again, if true can cbind
exprset2 = cbind(gpl_anno,exprset2)
table(duplicated(exprset2$symbol)) #check the duplicated gene symbol
annoted_exprsetwithGeneid <- aggregate(x = exprset2[,3:ncol(exprset2)],
                             by = list(exprset2$symbol),
                             FUN = median)  # give the duplicated genes as mean expression
table(duplicated(annoted_exprsetwithGeneid$symbol)) #check  if all the false
rownames(annoted_exprsetwithGeneid) <- annoted_exprsetwithGeneid[,1] # make the first col to the rownames
annoted_exprsetwithGeneid <- as.matrix(annoted_exprsetwithGeneid[,-1]) # delete the symbol col and change dataframe to the matrix


### 1.5 see the total difference of genes
# I would also recommend filtering transcripts by signal intensity prior to any further analysis or annotation. Answer:I do the filter as above, please check if right
# histograms can help here. Hist what?
top500_sd = annoted_exprsetwithGeneid %>%
  as.data.frame() %>%
  mutate( SD = apply(., 1, sd ) ) %>%
  # arrange( desc(SD) ) %>%
  slice_max( SD, n= 400 )
legend_col = data.frame( row.names = rownames(sampleinfo),
                         Group = sampleinfo$Group )  # set the grouplabel for the heatmap
bk = 2 
brk <- c(seq(-bk,-0.01,by=0.01),seq(0,bk,by=0.01))
heat1 = pheatmap(sd,
                 scale = "row", # 
                 annotation_col = legend_col,
                 color = c(colorRampPalette(colors = c("dodgerblue4","white"))(length(brk)/2),
                           colorRampPalette(colors = c("white","brown"))(length(brk)/2)),
                 legend_breaks=seq(-bk,bk,1),
                 breaks=brk,
                 border_color = NA,
                 show_rownames = F,
                 show_colnames = F)
p4 = as.ggplot(heat1)+
  ggtitle('Top 500 gene with large SD')+  
  xlab('Sample') + ylab('Gene')+
  theme(
    plot.title = element_text(hjust = 0.4),
    plot.background = element_rect(fill = "transparent",colour = NA)
  ) 
p4

rm(sd, legend_col, bk, brk, heat1 )
