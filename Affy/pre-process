###  set work dictionary, read files, do RMA and take the expression
SDRF <- read.delim("Liverpool APRB Transcriptomic Data Index.sdrf.txt")
raw_data_dir <- 'E:/Affymetrix Arrays of AP patients'
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- AnnotatedDataFrame(SDRF)

raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
                                                       SDRF$Array.Data.File),
                                 verbose = FALSE, phenoData = SDRF)

stopifnot(validObject(raw_data))

head(Biobase::pData(raw_data)) #only need Assay.Name, Characteristics.individual.,Factor.Value.Time.,Batch, Factor.Value.MRAC.


### Quality control of the raw data
Biobase::exprs(raw_data)[1:5, 1:5]
min(Biobase::exprs(raw_data)) # check if there was less than 1
exp_raw <- log2(Biobase::exprs(raw_data))
PCA_raw <- prcomp(t(exp_raw), scale. = FALSE) #检查是否有阻碍分析的，比如batch影响
percentVar <- round(100*PCA_raw$sdev^2/sum(PCA_raw$sdev^2),1)
sd_ratio <- sqrt(percentVar[2] / percentVar[1])
dataGG <- data.frame(PC1 = PCA_raw$x[,1], PC2 = PCA_raw$x[,2],
                     MRAC = pData(raw_data)$Factor.Value.MRAC.,
                     Time = pData(raw_data)$Factor.Value.Time.,
                     Individual = pData(raw_data)$Characteristics.individual.,
                     Batch =as.factor(Biobase ::pData(raw_data)$Batch))
ggplot(dataGG, aes(PC1, PC2)) +
  geom_point(aes(shape = MRAC, colour = Time)) +
  ggtitle("PCA plot of the log-transformed raw expression data") +
  xlab(paste0("PC1, VarExp: ", percentVar[1], "%")) +
  ylab(paste0("PC2, VarExp: ", percentVar[2], "%")) +
  theme(plot.title = element_text(hjust = 0.5))+
  coord_fixed(ratio = sd_ratio) +
  scale_shape_manual(values = c(4,15)) +
  scale_color_manual(values = c('#000000', '#e6194B', '#a9a9a9','#42d4f4'))+
  stat_ellipse(aes(fill=Batch),type="norm",geom="polygon",alpha=0.2,color=NA)
oligo::boxplot(raw_data, target = "core",
               main = "Boxplot of log2-intensitites for the raw data")

arrayQualityMetrics(expressionset = raw_data,
                    outdir =raw_data_dir,
                    force = TRUE, do.logtransform = TRUE,
                    intgroup = c("Factor.Value.MRAC.", "Factor.Value.Time.", "Batch"))
head(ls("package:pd.hg.u133.plus.2"))#确定究竟是exon还是genepd.hg.u133.plus.2

###One-step preprocessing in oligo
palmieri_eset <- oligo::rma(raw_data,normalize = FALSE)# not normalize, check if there is a need for normalization

#log2转换后查看均值，看一下样本是否需要进一步的normalize
row_medians_assayData <-
  Biobase::rowMedians(as.matrix(Biobase::exprs(palmieri_eset)))
RLE_data <- sweep(Biobase::exprs(palmieri_eset), 1, row_medians_assayData)
RLE_data <- as.data.frame(RLE_data)
RLE_data_gathered <-
  tidyr::gather(RLE_data, patient_array, log2_expression_deviation)
ggplot2::ggplot(RLE_data_gathered, aes(patient_array,
                                       log2_expression_deviation)) +
  geom_boxplot(outlier.shape = NA) +
  ylim(c(-2, 2)) +
  theme(axis.text.x = element_text(colour = "aquamarine4",
                                   angle = 60, size = 6.5, hjust = 1 ,
                                   face = "bold"))
###RMA calibration of the data
palmieri_eset_norm <- oligo::rma(raw_data) # the boxplot show it need to be normalized. So apply the full RMA algorithm. 

###Quality assessment of the calibrated data
exp_palmieri <- Biobase::exprs(palmieri_eset_norm) #+1 #the min of expr is 1.78, so i add 1 to all the data which can make sure there is no negative number when it log2 transformed
PCA <- prcomp(t(exp_palmieri), scale = FALSE)
percentVar <- round(100*PCA$sdev^2/sum(PCA$sdev^2),1)
sd_ratio <- sqrt(percentVar[2] / percentVar[1])
#check the batch, timepoint and MRAC
dataGG <- data.frame(PC1 = PCA$x[,1], PC2 = PCA$x[,2],
                     MRAC =
                       Biobase ::pData(palmieri_eset_norm)$Factor.Value.MRAC.,
                     Time =
                       Biobase::pData(palmieri_eset_norm)$Factor.Value.Time.,
                     Batch =
                       as.factor(Biobase ::pData(palmieri_eset_norm)$Batch))
ggplot(dataGG, aes(PC1, PC2)) +
  geom_point(aes(shape = MRAC, colour = Time)) +
  ggtitle("PCA plot of the calibrated, summarized AP patients") +
  xlab(paste0("PC1, VarExp: ", percentVar[1], "%")) +
  ylab(paste0("PC2, VarExp: ", percentVar[2], "%")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  coord_fixed(ratio = sd_ratio) +
  scale_shape_manual(values = c(4,15)) +
  scale_color_manual(values = c('#000000', '#e6194B', '#a9a9a9','#42d4f4'))+
  stat_ellipse(aes(fill=Batch),type="norm",geom="polygon",alpha=0.2,color=NA)

#Heatmap clustering analysis: plot a heatmap with the sample-to-sample distances 
Time_names <- pData(palmieri_eset_norm)$Factor.Value.Time.
MRAC_names <- pData(palmieri_eset_norm)$Factor.Value.MRAC.
Batch_names <- as.factor(Biobase ::pData(palmieri_eset_norm)$Batch)

annotation_for_heatmap <-
  data.frame(Time = Time_names, MRAC = MRAC_names, Batch = Batch_names)
row.names(annotation_for_heatmap) <- row.names(pData(palmieri_eset_norm))

dists <- as.matrix(dist(t(exp_palmieri), method = "manhattan")) # choose the Manhattan distance here (it uses absolute distances along rectangular paths instead of squared distances of the direct path), as it is more robust.
rownames(dists) <- row.names(pData(palmieri_eset_norm))
hmcol <- rev(colorRampPalette(RColorBrewer::brewer.pal(9, "YlOrRd"))(255))
colnames(dists) <- NULL
diag(dists) <- NA
ann_colors <- list(
  Time = c('OneDay' = "#000000", 'OneWeek' = "#e6194B",'TwoDay' = '#a9a9a9','TwoWeek' = '#42d4f4'),
  MRAC = c(Mild = "#4363d8", Severe = "#808000"),
  Batch = c('1'='#aaffc3','2'='#fffac8','3'='#dcbeff'))
pheatmap(dists, col = (hmcol),
         annotation_row = annotation_for_heatmap,
         annotation_colors = ann_colors,
         legend = TRUE,
         treeheight_row = 0,
         legend_breaks = c(min(dists, na.rm = TRUE),
                           max(dists, na.rm = TRUE)),
         legend_labels = (c("small distance", "large distance")),
         main = "Clustering heatmap for the calibrated samples")

###Filtering based on intensity
palmieri_medians <- rowMedians(Biobase::exprs(palmieri_eset_norm))
hist_res <- hist(palmieri_medians, 100, col = "cornsilk1", freq = FALSE,
                 main = "Histogram of the median intensities",
                 border = "antiquewhite4",
                 xlab = "Median intensities")
man_threshold <- 4 # 根据直方图，4或者5都可以接受
hist_res <- hist(palmieri_medians, 100, col = "cornsilk", freq = FALSE,
                 main = "Histogram of the median intensities",
                 border = "antiquewhite4",
                 xlab = "Median intensities")
abline(v = man_threshold, col = "coral4", lwd = 2)

no_of_samples <-
  table(paste0(pData(palmieri_eset_norm)$Factor.Value.Time., "_",
               pData(palmieri_eset_norm)$Factor.Value.MRAC.))
no_of_samples
samples_cutoff <- min(no_of_samples)
idx_man_threshold <- apply(Biobase::exprs(palmieri_eset_norm), 1,
                           function(x){
                             sum(x > man_threshold) >= samples_cutoff})
table(idx_man_threshold)
palmieri_manfiltered <- subset(palmieri_eset_norm, idx_man_threshold)


###Annotation of the transcript clusters. Our data were used via 'Affymetrix Human Genome U133 Plus 2.0' which need hgu133plus2.db
anno_palmieri <- AnnotationDbi::select(hgu133plus2.db, #used the function select from AnnotationDbi to query the gene symbols and associated short descriptions for the transcript clusters.
                                       keys = (featureNames(palmieri_manfiltered)),
                                       columns = c("SYMBOL", "GENENAME"),
                                       keytype = "PROBEID")
anno_palmieri <- subset(anno_palmieri, !is.na(SYMBOL))

### Removing multiple mappings
anno_grouped <- group_by(anno_palmieri, PROBEID)
anno_summarized <-
  dplyr::summarize(anno_grouped, no_of_matches = n_distinct(SYMBOL))
head(anno_summarized)
anno_filtered <- filter(anno_summarized, no_of_matches > 1)
head(anno_filtered)
probe_stats <- anno_filtered
nrow(probe_stats)
dim(probe_stats)
ids_to_exlude <- (featureNames(palmieri_manfiltered) %in% probe_stats$PROBEID)
table(ids_to_exlude)
palmieri_final <- subset(palmieri_manfiltered, !ids_to_exlude)
validObject(palmieri_final)
head(anno_palmieri)
fData(palmieri_final)$PROBEID <- rownames(fData(palmieri_final))
fData(palmieri_final) <- left_join(fData(palmieri_final), anno_palmieri)
rownames(fData(palmieri_final)) <- fData(palmieri_final)$PROBEID
validObject(palmieri_final)
