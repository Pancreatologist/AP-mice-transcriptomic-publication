### 2 DEG
### 2.1 make the contrast----
# group
table(sampleinfo$Group)
contrast #check the righ contrast

# contrast matrix
design <- model.matrix(~0+factor(sampleinfo$Group) ) %>%
  as.data.frame() %>% 
  setNames( unique(sampleinfo$Group) )
rownames(design) = rownames(sampleinfo)
design

c("MSAPandSAP","MAP-MSAP+SAP")#contrast

contrast.matrix <-makeContrasts( contrasts = c("MSAPandSAP-MAP","MAP-MSAPandSAP"), levels = design ) 
contrast.matrix

### 2.2 count the DEG----
degs_temp <- lmFit(annoted_exprsetwithGeneid, design ) %>% # Fit linear model
  contrasts.fit( contrast.matrix ) %>% # compute estimated coefficients and standard errors for a given set of contrasts
  eBayes %>% # compute moderated t-statistics, moderated F-statistic, and log-odds of differential expression
  topTable( coef = 1, n = Inf ) %>% # this mean the first contrast
  na.omit %>% # 
  setNames( c("log2FC", "Mean.Expr", "t", "P.value", "adj.P", "B" ) ) %>%
  mutate( probe_id = rownames(.) ) 

logFC_cut = with(degs_temp, mean(abs(log2FC))+2*sd(abs(log2FC))) # take a 95%CI for log2FC

# There are problems here — the P.value from topTable is not adjusted for multiple comparisons,
# meaning each transcript coefficient is being tested entirely independently of the 1000s of other tests.
# I would recommend using adj.P.Val instead, which are adjusted to control the proportion of Type I errors (false discovery rate, FDR). Answer:I change the P to adj.P in the degs_temp follow this comment. And there are all ns. I don't know if doing correctly. 
# In this case, adj.P.Vals of <0.05 would reflect a FDR of <0.05.
degs_temp = degs_temp %>%
  mutate( DEG = factor( ifelse( abs(degs_temp$log2FC) > logFC_cut & degs_temp$adj.P < 0.05,
                                ifelse(degs_temp$log2FC > 0, 'up','down'),
                                'ns' ), 
                        levels = c("up", "ns", "down" ), ordered = T ) )
table( degs_temp$DEG )


rm( design, contrast.matrix )

### 2.3 volcano plot for DEG
p5 = ggplot(data = degs_temp,
            aes(x = log2FC, y = -log10(adj.P), color = DEG)) +
  # ylim(0,25)+ 
  #  xlim(-0.005,0.005)+ 
  geom_point(size = 1, shape = 16, alpha = 0.9) +
  ggtitle('Overall distribution of DEGs') +
  theme_light() +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.background = element_rect(fill = "transparent",colour = NA)
  ) +
  scale_color_manual(values = c('brown','grey','dodgerblue3' ))+
  guides(color = guide_legend(override.aes = list(size = 4))) +
  geom_vline( xintercept = c(-logFC_cut, logFC_cut), linetype = "dashed" ) +
  geom_hline( yintercept = -log10(0.05), linetype = "dashed" )
p5
ggsave( p5, filename = paste("2.3 volcano plot",".pdf",sep= ""),width = 5, height = 4)

rm( logFC_cut )

### 2.4 heatmap----
chs_x = degs_temp %>%
  slice_max( abs(log2FC), n = 500 ) 

heat_matrix <- as.matrix(row.names(degs_temp))
legend_col = data.frame( row.names = rownames(sampleinfo),
                         Group = sampleinfo$Group )  
bk = 2 
brk <- c(seq(-bk,-0.01,by=0.01),seq(0,bk,by=0.01))
heat1 = pheatmap(heat_matrix,
                 scale = "row",
                 annotation_col = legend_col,
                 color = c(colorRampPalette(colors = c("dodgerblue4","white"))(length(brk)/2),
                           colorRampPalette(colors = c("white","brown"))(length(brk)/2)),
                 legend_breaks=seq(-bk,bk,1),
                 breaks=brk,
                 treeheight_row = 40,
                 treeheight_col = 40,
                 border_color = NA,
                 cluster_cols = F,
                 show_rownames = F,
                 show_colnames = F
)
p6 = as.ggplot(heat1)+
  ggtitle('Top 500 DEGs')+  
  xlab('Sample') + ylab('Gene')+
  theme(
    plot.title = element_text(hjust = 0.4),
    plot.background = element_rect(fill = "transparent",colour = NA)
  )
p6
rm(chs_x, heat_matrix, legend_col, bk, brk, heat1 )


### Gene ID change (from "SYMBOL" to "ENTREZID") to further using 'clusterProfiler'
degswithENTRE = degs_temp %>%
  mutate(symbol = row.names(degs_temp))%>%
  pull(symbol) %>% 
  bitr( ., fromType = "SYMBOL", toType = c("ENTREZID"), # from  'symbol' to 'ENTREZID'
        OrgDb = hgu133plus2.db ) %>%  
# if DEG too many, that filter to 300, make a threshold
#qu1 = quantile(degs_final$Mean.Expr, probs = 0.25 ) # expr : IQR 25%
#fc1 = mean(abs(degs_final$log2FC))  # Log2FC :  mean
#qu1;fc1
# degswithENTRE = filter( Mean.Expr > qu1 & abs(log2FC) > fc1 & adj.P < 0.05 ) %>%  # expr > IQR 25%，Log2FC > mean，adj.P < 0.05
#  arrange( adj.P ) %>% # arrange by adj.P
#  arrange( desc( abs(log2FC) ) ) %>%
#  mutate(symbol = row.names(degs_temp))%>%
# pull( symbol ) %>% # 
#  bitr( ., fromType = "SYMBOL", toType = c("ENTREZID"), 
#        OrgDb = org.Mm.eg.db ) %>%  # from  'symbol' to 'ENTREZID'
#  slice_head( n = 300 ) # get the top 300 or other
