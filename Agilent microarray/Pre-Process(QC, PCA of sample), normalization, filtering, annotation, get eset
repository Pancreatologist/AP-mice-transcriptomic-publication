###Read in and normalise data
target <- readTargets("CER.txt" ) #import all the CER group and control group
rownames(target) <- removeExt(target$FileName)
target
RG <- read.maimages(target, source ="agilent") #read files

###Quality Assessment
summary(RG$R)
plotMD(RG)
boxplot(data.frame(log2(RG$Gb)),main="Green background") #quality characteristics of each array
boxplot(data.frame(log2(RG$Rb)),main="Red background")
imageplot(log2(RG$Gb[,1]),RG$printer)

### Perform background correction on the fluorescent intensities
RG.bgcorrect <- backgroundCorrect(RG, method = 'normexp', offset = 16) #offset may depend on the number of sample (25%-50%)
### Normalize the data in array with the 'loess' method
RG.bgcorrect.norm <- normalizeWithinArrays(RG.bgcorrect, method = 'loess')
plotMD(RG.bgcorrect.norm)
### Normalize the data between arrays 
MA <- normalizeBetweenArrays(RG.bgcorrect.norm, method = "Aquantile")
plotDensities(RG.bgcorrect.norm)#check the signal density map
plotDensities(MA)
MA$genes$ControlType %>% unique() #include what category of probe

### remove the control probe
keepProbe <- MA$genes$ControlType == 0
MA.reomoveCTprobe <- MA[keepProbe,] #remove the control probe
MA.reomoveCTprobe$genes$ProbeName %>% table() %>% sort(decreasing = TRUE) %>% head(n = 3) 
MA.reomoveCTprobe.average <- avereps(MA.reomoveCTprobe, ID = MA.reomoveCTprobe$genes$ProbeName) # take an average of probe

### For replicate probes in each sample, replace values with the average
MA.reomoveCTprobe.average <- avereps(
  MA.reomoveCTprobe,
  ID = MA.reomoveCTprobe$genes$ProbeName)
MA.reomoveCTprobe.average$targets

###Annotation 
annotationRG <- RG$genes #it has the gene name, Gordon Smyth also said that a few duplicate gene symbols cause no problems so it is generally best to simply keep all the probes in the DE analysis
                         #https://www.biostars.org/p/484527/#486185
### QC

PCA <- prcomp(t(MA.reomoveCTprobe$genes), scale = FALSE)


### analyze from MA list
targets2 <- targetsA2C(target)
u <- unique(targets2$Target)
f <- factor(targets2$Target, levels=u)
design <- model.matrix(~0+f) #make the design with each color of total sample
design <-  model.matrix(~f+targets2$Batch) #there is the information of batch on the target, but when i added the batch, the result 
colnames(design) <- u
rownames(design) <- rownames(targets2)
corfit <- intraspotCorrelation(MA.reomoveCTprobe.average, design)
fit <- lmscFit(MA.reomoveCTprobe.average, design, correlation=corfit$consensus)
cont.matrix <- makeContrasts("wt.SC7plus6-wt.C7plus6",levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
topTable(fit2, adjust="BH")
volcanoplot(fit2)

### batch analyze
com_list = c( "wt.SC4plus9-wt.C4plus9", "wt.SC7-WT.C7", "wt.SC7plus6-WT.C7plus6", "wt.Control-WT.SC4plus9", "wt.Control-WT.SC7","wt.Control-WT.SC7plus6",
              "wt.SC7plus6-WT.SC4plus9","wt.SC7plus6-WT.WT.SC7","WT.SC7-WT.SC4plus9" )
fit_list = lapply( com_list, function(xxx){lmscFit(MA, design, correlation=corfit$consensus) %>% 
    contrasts.fit( cont.matrix ) %>% 
    eBayes %>%
    topTable(coef = 1, n = Inf) %>% # coef = 1 means choose the first of com_list
    na.omit} )
names(fit_list) = com_list



###return the expression data of each color from two color array, i think which may not be correct but need to valid
targets2 <- targetsA2C(target)
eset = exprs.MA( MA.reomoveCTprobe.average) #get the expression from MA
colnames(eset) <- targets2$Target
rownames(eset) <- MA.reomoveCTprobe.average$genes$GeneName

# check the PCA of sample
PCA <- prcomp(t(eset), scale = FALSE)
percentVar <- round(100*PCA$sdev^2/sum(PCA$sdev^2),1)
sd_ratio <- sqrt(percentVar[2] / percentVar[1])
dataGG <- data.frame(PC1 = PCA$x[,1], PC2 = PCA$x[,2],
                     Model =
                       targets2$Target)
ggplot(dataGG, aes(PC1, PC2)) +
  geom_point(aes(shape = Model)) +
  ggtitle("PCA plot of sample") +
  xlab(paste0("PC1, VarExp: ", percentVar[1], "%")) +
  ylab(paste0("PC2, VarExp: ", percentVar[2], "%")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  coord_fixed(ratio = sd_ratio) +
  scale_shape_manual(values = c(1:12))

# DEG
u <- unique(targets2$Target)
f <- factor(targets2$Target, levels=u)
design <- model.matrix(~0+f) #make the design with each color of total sample
colnames(design) <- u
rownames(design) <- rownames(targets2)
contrast.matrix <- makeContrasts(wt.SC7plus6vswt.C7plus6=wt.SC7plus6-wt.C7plus6,levels=design)
degs_temp <- lmFit(eset, design ) %>% # Fit linear model
  contrasts.fit( contrast.matrix ) %>% # compute estimated coefficients and standard errors for a given set of contrasts
  eBayes  # compute moderated t-statistics, moderated F-statistic, and log-odds of differential expression
p1 = ggplot(data = degs_temp,
            aes(x = logFC, y = -log10(adj.P.Val))) +
  geom_point(size = 1, shape = 16, alpha = 0.9) +
  ggtitle('Distribution of DEGs') +
  theme_light() +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.background = element_rect(fill = "transparent",colour = NA)
  ) +
  scale_color_manual(values = c('brown','grey','dodgerblue3' ))+
  guides(color = guide_legend(override.aes = list(size = 4))) +
  geom_vline( xintercept = c(-1, 1), linetype = "dashed" ) +
  geom_hline( yintercept = -log10(0.05), linetype = "dashed" )
p1

# batch contrast for DEG
com_list = c( "wt.SC4plus9-wt.C4plus9", "wt.SC7-WT.C7", "wt.SC7plus6-WT.C7plus6", "wt.Control-WT.SC4plus9", "wt.Control-WT.SC7","wt.Control-WT.SC7plus6",
              "wt.SC7plus6-WT.SC4plus9","wt.SC7plus6-WT.WT.SC7","WT.SC7-WT.SC4plus9" )
deg_list = lapply( com_list, function(xxx){lmFit(eset, design ) %>% 
    contrasts.fit( contrast.matrix ) %>% 
    eBayes %>%
    topTable(coef = 1, n = Inf) %>% # coef = 1 represent the frist of list
    na.omit} )
names( deg_list ) = com_list

deg_list = deg_list %>%
  mutate( deg_list = factor( ifelse( abs(degs_temp$log2FC) > logFC_cut & degs_temp$adj.P < 0.05,
                                ifelse(degs_temp$log2FC > 0, 'up','down'),
                                'ns' ), 
                        levels = c("up", "ns", "down" ), ordered = T ) )














